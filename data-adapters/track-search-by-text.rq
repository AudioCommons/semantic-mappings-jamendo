PREFIX ac: <https://w3id.org/ac-ontology/aco#>
PREFIX dc: <http://purl.org/dc/elements/1.1/>
PREFIX iter: <http://w3id.org/sparql-generate/iter/>
PREFIX fn: <http://w3id.org/sparql-generate/fn/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX cc: <http://creativecommons.org/ns#>
PREFIX http: <http://www.w3.org/2011/http#>
PREFIX prov: <http://www.w3.org/ns/prov#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX schema: <http://schema.org/>
PREFIX ebu: <http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#>
PREFIX mo: <http://purl.org/ontology/mo/>

PREFIX encoding_mp3: <http://www.ebu.ch/metadata/ontologies/skos/ebu_AudioCompressionCodeCS#_8.4>
PREFIX encoding_ogg: <http://www.ebu.ch/metadata/ontologies/skos/ebu_AudioCompressionCodeCS#_26>
PREFIX encoding_wav: <http://www.ebu.ch/metadata/ontologies/skos/ebu_AudioCompressionCodeCS#_28>
PREFIX encoding_flac: <http://www.ebu.ch/metadata/ontologies/skos/ebu_AudioCompressionCodeCS#_22>

PREFIX jamendo-tracks: <https://w3id.org/audiocommons/services/jamendo/tracks/>
PREFIX jamendo-artists: <https://w3id.org/audiocommons/services/jamendo/artists/>
PREFIX jamendo-albums: <https://w3id.org/audiocommons/services/jamendo/albums/>
PREFIX jamendo-tags: <https://w3id.org/audiocommons/services/jamendo/tags/>
PREFIX jamendo-tags-genres: <https://w3id.org/audiocommons/services/jamendo/tags/genres/>
PREFIX jamendo-tags-instruments: <https://w3id.org/audiocommons/services/jamendo/tags/instruments/>
PREFIX jamendo-tags-vartags: <https://w3id.org/audiocommons/services/jamendo/tags/vartags/>
PREFIX jamendo-error-types: <https://w3id.org/audiocommons/services/jamendo/error-types/>

PREFIX jamendo-audio-mp3: <https://mp3d.jamendo.com/download/track/>
PREFIX jamendo-audio-ogg: <https://ogg.jamendo.com/download/track/>
PREFIX jamendo-audio-flac: <https://flac.jamendo.com/download/track/>

PREFIX jamendo-api: <https://api.jamendo.com/v3.0/>

# TODO evaluate if mapping properties of ?artist and ?parentCollection (album)

GENERATE {

  GENERATE {
    <http://jamendo.com>
        rdf:type foaf:Organization ; # prov:Agent,
        foaf:name "Jamendo" .

    ?searchAction
        a schema:SearchAction ;
        schema:object <http://jamendo.com> ;
        schema:query $pattern ;
        schema:startTime $startTime;
        schema:endTime ?endTime;
        schema:actionStatus ?actionStatus;
        schema:result ?audioCollection ;
        schema:error ?error .

    ?audioCollection
        rdf:type ac:AudioCollection; #, prov:Entity ;
        # prov:wasAttributedTo <http://jamendo.com> ;
        ac:memberNode ?audioCollectionNode ;
        ac:nodeCount ?nodeCount .

    ?error
        a ?errorType ;
        rdfs:label ?errorMessage .

    GENERATE {
      ?audioCollection ac:memberNode ?audioCollectionNode .

      ?audioCollectionNode
          a ac:AudioCollectionNode ;
          ac:nodeIndex ?index ;
          ac:nodeContent ?audioClip .

      ?audioClip
          rdf:type ac:AudioClip ;
          dc:title ?name ;
          ac:author ?artist ;
          ac:image ?image ;
          ac:duration ?duration ;
          cc:license ?license ;
          ac:defaultContainerNode ?defaultContainerNode ;
  #        ac:originalFile _:originalAudioFile .
          ac:availableAs _:audioFileOgg, _:audioFileFlac, _:audioFileHqMp3.

      _:audioFileOgg
          a ac:AudioFile; #, schema:AudioObject ;
          ebu:locator ?audioFileOggUrl ; # or ma:locator or schema:contentUrl
          ebu:hasAudioEncodingFormat encoding_ogg: .

      _:audioFileFlac
          a ac:AudioFile; #, schema:AudioObject ;
          ebu:locator ?audioFileFlacUrl ; # or ma:locator or schema:contentUrl
          ebu:hasAudioEncodingFormat encoding_flac: .

  #    _:audioFileLqMp3
  #        a ac:AudioFile; #, schema:AudioObject ;
  #        ebu:locator ?audioFileLqMp3Url ; # or ma:locator or schema:contentUrl
  #        ebu:bitRate 96000; # 64 kbps
  #        ebu:hasAudioEncodingFormat encoding_mp3: ;
  #        ebu:audioChannelNumber ?signalChannels ;
  #        ebu:sampleSize ?signalBitsPerSample ;
  #        ebu:sampleRate ?signalSampleRate .

      _:audioFileHqMp3
          a ac:AudioFile; #, schema:AudioObject ;
          ebu:locator ?audioFileHqMp3Url ; # or ma:locator or schema:contentUrl
          ebu:hasAudioEncodingFormat encoding_mp3: .

      ?defaultContainerNode
          a ac:AudioCollectionNode;
          ac:nodeIndex ?position.

      ?parentCollection
          a ac:AudioCollection ;
          ac:memberNode ?defaultContainerNode .

      ?image
          a ebu:Picture;
          ebu:locator ?imageUrl.

      GENERATE {?audioClip ac:audioCategory ?category}
    	ITERATOR iter:JSONPath(?res, "musicinfo.tags.vartags[*]") AS ?tag
    	WHERE {
          BIND(STR(?tag) AS ?tagStr)
          BIND(IRI(CONCAT(STR(jamendo-tags-vartags:), SUBSTR(?tagStr, 2, STRLEN(?tagStr) - 2))) AS ?category)
    	} .

      GENERATE {?audioClip mo:genre ?category}
    	ITERATOR iter:JSONPath(?res, "musicinfo.tags.genres[*]") AS ?tag
    	WHERE {
          BIND(STR(?tag) AS ?tagStr)
          BIND(IRI(CONCAT(STR(jamendo-tags-genres:), SUBSTR(?tagStr, 2, STRLEN(?tagStr) - 2))) AS ?category)
    	} .

      GENERATE {?audioClip mo:instrument ?category}
    	ITERATOR iter:JSONPath(?res, "musicinfo.tags.instruments[*]") AS ?tag
    	WHERE {
          BIND(STR(?tag) AS ?tagStr)
          BIND(IRI(CONCAT(STR(jamendo-tags-instruments:), SUBSTR(?tagStr, 2, STRLEN(?tagStr) - 2))) AS ?category)
    	} .

    }
    ITERATOR iter:JSONElement(?source,"results[*]") AS ?resIterator
    WHERE {
      BIND(BNODE() AS ?audioCollectionNode)
      BIND(fn:JSONPath(?resIterator, "element") AS ?res)
      BIND(fn:JSONPath(?resIterator, "position") AS ?indexFromZero)
      BIND(?indexFromZero + 1 AS ?index)

      BIND(STR(fn:JSONPath(?res, "id")) AS ?jamendoId)
      BIND(IRI(CONCAT(STR(jamendo-tracks:), ?jamendoId)) AS ?audioClip)
      BIND(fn:JSONPath(?res, "name") AS ?name)
      BIND(xsd:float(fn:JSONPath(?res, "duration") * 1000) AS ?duration)
      BIND(iri(fn:JSONPath(?res, "license_ccurl")) as ?license)

      BIND(IRI(fn:JSONPath(?res, "audiodownload")) AS ?originalAudioFileUrl)
      BIND(IRI(CONCAT(STR(jamendo-artists:), fn:JSONPath(?res, "artist_id"))) AS ?artist)

      BIND(fn:JSONPath(?res, "album_id") AS ?albumId)
      OPTIONAL {
        BIND(BNODE() AS ?defaultContainerNode).
        FILTER(BOUND(?albumId))
      }
      BIND(IRI(CONCAT(STR(jamendo-albums:), ?albumId)) AS ?parentCollection)
      BIND(fn:JSONPath(?res, "position") AS ?position)

      BIND(IRI(fn:JSONPath(?res, "image")) AS ?imageUrl)
      OPTIONAL {
        BIND(BNODE() AS ?image).
        FILTER(BOUND(?imageUrl))
      }

      BIND(IRI(CONCAT(STR(jamendo-audio-mp3:), ?jamendoId, '/mp32/')) AS ?audioFileHqMp3Url)
      BIND(IRI(CONCAT(STR(jamendo-audio-ogg:), ?jamendoId, '/ogg1/')) AS ?audioFileOggUrl)
      BIND(IRI(CONCAT(STR(jamendo-audio-flac:), ?jamendoId, '/flac/')) AS ?audioFileFlacUrl)

    } .

  }
  SOURCE ?serviceCall AS ?source
  WHERE {
    BIND(BNODE() AS ?searchAction)
    BIND(fn:JSONPath(?source, "headers.status") AS ?statusTxt)
    BIND(IF(?statusTxt = "success", schema:CompletedActionStatus, schema:FailedActionStatus) AS ?actionStatus)
    OPTIONAL {
    	BIND(BNODE() AS ?audioCollection) .
      FILTER(?statusTxt = "success")
    }
    OPTIONAL {
    	BIND(BNODE() AS ?error) .
      FILTER(?statusTxt = "failed")
    }
    BIND(fn:JSONPath(?source, "headers.code") AS ?errorCode) .
    BIND(IRI(CONCAT(STR(jamendo-error-types:), STR(?errorCode))) AS ?errorType) .
    BIND(fn:JSONPath(?source, "headers.error_message") AS ?errorMessage)  .
    BIND(NOW() AS ?endTime)
  } .
}
WHERE {
  BIND(IRI(CONCAT(
      STR(jamendo-api:), "tracks/",
      "?client_id=", ENCODE_FOR_URI($token),
      "&format=json",
      "&include=musicinfo",
      "&search=", ENCODE_FOR_URI($pattern),
      IF(BOUND($limit), CONCAT("&limit=", ENCODE_FOR_URI(STR($limit))),"")
  )) AS ?serviceCall)
}
