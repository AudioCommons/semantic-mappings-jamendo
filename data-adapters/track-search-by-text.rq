PREFIX ac: <https://w3id.org/ac-ontology/aco#>
PREFIX dc: <http://purl.org/dc/elements/1.1/>
PREFIX iter: <http://w3id.org/sparql-generate/iter/>
PREFIX fn: <http://w3id.org/sparql-generate/fn/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX cc: <http://creativecommons.org/ns#>
PREFIX http: <http://www.w3.org/2011/http#>
PREFIX prov: <http://www.w3.org/ns/prov#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX schema: <http://schema.org/>
PREFIX ebu: <http://www.ebu.ch/metadata/ontologies/ebucore/ebucore#>

PREFIX jamendo-tracks: <https://w3id.org/audiocommons/services/jamendo/tracks/>
PREFIX jamendo-artists: <https://w3id.org/audiocommons/services/jamendo/artists/>
PREFIX jamendo-albums: <https://w3id.org/audiocommons/services/jamendo/albums/>
PREFIX jamendo-tags: <https://w3id.org/audiocommons/services/jamendo/tags/>
PREFIX jamendo-tags-genres: <https://w3id.org/audiocommons/services/jamendo/tags/genres/>
PREFIX jamendo-tags-instruments: <https://w3id.org/audiocommons/services/jamendo/tags/instruments/>
PREFIX jamendo-tags-vartags: <https://w3id.org/audiocommons/services/jamendo/tags/vartags/>

# TODO add tag mapping
# TODO evaluate if mapping properties of ?artist and ?parentCollection (album)

GENERATE {
  <http://jamendo.com>
      rdf:type foaf:Organization ; # prov:Agent,
      foaf:name "Jamendo" .

  ?searchAction
      a schema:SearchAction ;
      schema:object <http://jamendo.com> ;
      schema:query "$pattern" ;
      schema:startTime $startTime;
      schema:endTime ?endTime;
      schema:actionStatus ?actionStatus;
      schema:result ?audioCollection ;
      schema:error ?error .

  ?audioCollection
      rdf:type ac:AudioCollection; #, prov:Entity ;
      # prov:wasAttributedTo <http://jamendo.com> ;
      ac:memberNode ?audioCollectionNode ;
      ac:nodeCount ?nodeCount .

  ?error
      dc:identifier ?errorCode ;
      schema:identifier ?errorCode ;
      rdfs:label ?errorMessage .

  GENERATE {
    ?audioCollection ac:memberNode ?audioCollectionNode .

    ?audioCollectionNode
        a ac:AudioCollectionNode ;
        ac:nodeIndex ?index ;
        ac:nodeContent ?audioClip .

    ?audioClip
        rdf:type ac:AudioClip ;
        dc:title ?name ;
        ac:author ?artist ;
        ac:image ?image ;
        ac:duration ?duration ;
        cc:license ?license ;
        ac:defaultContainerNode ?defaultContainerNode ;
        ac:originalFile _:originalAudioFile ;
        ac:available_as _:originalAudioFile.

    _:originalAudioFile
        a ebu:MediaResource;
        ebu:locator ?originalAudioFileUrl.

    ?defaultContainerNode
        a ac:AudioCollectionNode;
        ac:nodeIndex ?position.

    ?parentCollection
        a ac:AudioCollection ;
        ac:memberNode ?defaultContainerNode .

    ?image
        a ebu:Picture;
        ebu:locator ?imageUrl.

  }
  ITERATOR iter:JSONElement(?source,"results[*]") AS ?resIterator
  WHERE {
    BIND(BNODE() AS ?audioCollectionNode)
    BIND(fn:JSONPath(?resIterator, "element") AS ?res)
    BIND(fn:JSONPath(?resIterator, "position") AS ?indexFromZero)
    BIND(?indexFromZero + 1 AS ?index)

    BIND(IRI(CONCAT(STR(jamendo-tracks:), STR(fn:JSONPath(?res, "id")))) AS ?audioClip)
    BIND(fn:JSONPath(?res, "name") AS ?name)
    BIND(fn:JSONPath(?res, "duration") * 1000 AS ?duration)
    BIND(iri(fn:JSONPath(?res, "license_ccurl")) as ?license)

    BIND(IRI(fn:JSONPath(?res, "audiodownload")) AS ?originalAudioFileUrl)
    BIND(IRI(CONCAT(STR(jamendo-artists:), fn:JSONPath(?res, "artist_id"))) AS ?artist)

    BIND(fn:JSONPath(?res, "album_id") AS ?albumId)
    OPTIONAL {
      BIND(BNODE() AS ?defaultContainerNode).
      FILTER(BOUND(?albumId))
    }
    BIND(IRI(CONCAT(STR(jamendo-albums:), ?albumId)) AS ?parentCollection)
    BIND(fn:JSONPath(?res, "position") AS ?position)

    BIND(fn:JSONPath(?res, "image") AS ?imageUrl)
    OPTIONAL {
      BIND(BNODE() AS ?image).
      FILTER(BOUND(?imageUrl))
    }

  } .

}
SOURCE <https://api.jamendo.com/v3.0/tracks/?client_id=$token&format=json&search=$pattern> AS ?source
WHERE {
  BIND(BNODE() AS ?searchAction)
  BIND(fn:JSONPath(?source, "headers.status") AS ?statusTxt)
  BIND(IF(?statusTxt = "success", schema:CompletedActionStatus, schema:FailedActionStatus) AS ?actionStatus)
  OPTIONAL {
  	BIND(BNODE() AS ?audioCollection) .
    FILTER(?statusTxt = "success")
  }
  OPTIONAL {
  	BIND(BNODE() AS ?error) .
    FILTER(?statusTxt = "failed")
  }
  BIND(fn:JSONPath(?source, "headers.code") AS ?errorCode) .
  BIND(fn:JSONPath(?source, "headers.error_message") AS ?errorMessage)  .
  BIND(NOW() AS ?endTime)
}
